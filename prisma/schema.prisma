// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum UploadStatus {
  PENDING
  REVIEWED
  APPROVED
  REJECTED
}

enum ReportStatus {
  DRAFT
  GENERATED
  PUBLISHED
}

enum ActivityAction {
  LOGIN
  LOGOUT
  UPLOAD_TEMPLATE
  DOWNLOAD_TEMPLATE
  UPLOAD_DATA
  DOWNLOAD_DATA
  GENERATE_REPORT
  DOWNLOAD_REPORT
  CREATE_USER
  UPDATE_USER
  DELETE_USER
  CREATE_DRAFT
  UPDATE_DRAFT
  FINALIZE_DRAFT
}

enum DraftType {
  ADMIN
  USER
}

model User {
  id        String   @id @default(cuid())
  name      String
  username  String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  uploads   Upload[]
  reports   Report[]
  drafts    Draft[]
  activities ActivityLog[]

  @@map("users")
}

model Template {
  id            String   @id @default(cuid())
  name          String
  fileName      String
  fileUrl       String
  fileSize      Int
  financialYear String
  description   String?
  isActive      Boolean  @default(true)
  uploadedBy    String   // Admin user ID
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  uploads Upload[]

  @@map("templates")
}

model Upload {
  id            String       @id @default(cuid())
  fileName      String
  fileUrl       String
  fileSize      Int
  financialYear String
  status        UploadStatus @default(PENDING)
  userId        String
  templateId    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  reports  Report[]

  @@map("uploads")
}

model Report {
  id            String      @id @default(cuid())
  reportName    String
  fileUrl       String
  fileSize      Int
  financialYear String
  status        ReportStatus @default(DRAFT)
  userId        String
  uploadId      String?
  generatedBy   String      // Admin user ID
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  upload Upload? @relation(fields: [uploadId], references: [id], onDelete: SetNull)

  @@map("reports")
}

model Draft {
  id                  String     @id @default(cuid())
  userId              String
  uploadedTemplateId  String?
  draftNumber         Int        // Sequential draft number (1, 2, 3, 4, etc.)
  draftType           DraftType  // ADMIN or USER
  fileName            String
  fileUrl             String
  fileSize            Int
  financialYear       String
  isFinal             Boolean    @default(false)
  status              String     @default("PENDING_REVIEW")
  acceptedAsFinal     Boolean    @default(false) // Track if this draft was accepted as final
  acceptedBy          String?    // Who accepted it (admin or user ID)
  acceptedAt          DateTime?  // When it was accepted
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("drafts")
}

model ActivityLog {
  id        String        @id @default(cuid())
  action    ActivityAction
  details   String
  userId    String
  createdAt DateTime      @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}
